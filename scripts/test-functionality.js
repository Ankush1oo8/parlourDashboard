// Test script to verify all functionality
const BASE_URL = "http://localhost:3000"

async function testDatabaseConnection() {
  console.log("üîç Testing Database Connection...")

  try {
    const response = await fetch(`${BASE_URL}/api/init`)
    const data = await response.json()

    if (response.ok) {
      console.log("‚úÖ Database Status:", data.status)
      console.log("üìä Collection Counts:", data.counts)
      return true
    } else {
      console.log("‚ùå Database connection failed:", data.error)
      return false
    }
  } catch (error) {
    console.log("‚ùå Network error:", error.message)
    return false
  }
}

async function testAuthentication() {
  console.log("\nüîê Testing Authentication...")

  // Test Super Admin Login
  try {
    const response = await fetch(`${BASE_URL}/api/auth/login`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        email: "superadmin@parlour.com",
        password: "admin123",
      }),
    })

    const data = await response.json()

    if (response.ok) {
      console.log("‚úÖ Super Admin login successful")
      console.log("üë§ User:", data.user.name, "- Role:", data.user.role)
      return data.token
    } else {
      console.log("‚ùå Login failed:", data.error)
      return null
    }
  } catch (error) {
    console.log("‚ùå Authentication error:", error.message)
    return null
  }
}

async function testEmployeeOperations(token) {
  console.log("\nüë• Testing Employee Operations...")

  const headers = {
    "Content-Type": "application/json",
    Authorization: `Bearer ${token}`,
  }

  try {
    // Test GET employees
    const getResponse = await fetch(`${BASE_URL}/api/employees`, { headers })
    const employees = await getResponse.json()

    if (getResponse.ok) {
      console.log("‚úÖ Fetch employees successful:", employees.length, "employees found")
    } else {
      console.log("‚ùå Fetch employees failed:", employees.error)
      return false
    }

    // Test CREATE employee
    const createResponse = await fetch(`${BASE_URL}/api/employees`, {
      method: "POST",
      headers,
      body: JSON.stringify({
        name: "Test Employee",
        position: "Test Position",
        email: "test@parlour.com",
        phone: "+1234567899",
      }),
    })

    const newEmployee = await createResponse.json()

    if (createResponse.ok) {
      console.log("‚úÖ Create employee successful:", newEmployee.name)

      // Test UPDATE employee
      const updateResponse = await fetch(`${BASE_URL}/api/employees/${newEmployee.id}`, {
        method: "PUT",
        headers,
        body: JSON.stringify({
          name: "Updated Test Employee",
          position: "Updated Position",
          email: "updated@parlour.com",
          phone: "+1234567899",
        }),
      })

      if (updateResponse.ok) {
        console.log("‚úÖ Update employee successful")
      } else {
        console.log("‚ùå Update employee failed")
      }

      // Test DELETE employee
      const deleteResponse = await fetch(`${BASE_URL}/api/employees/${newEmployee.id}`, {
        method: "DELETE",
        headers,
      })

      if (deleteResponse.ok) {
        console.log("‚úÖ Delete employee successful")
      } else {
        console.log("‚ùå Delete employee failed")
      }

      return true
    } else {
      console.log("‚ùå Create employee failed:", newEmployee.error)
      return false
    }
  } catch (error) {
    console.log("‚ùå Employee operations error:", error.message)
    return false
  }
}

async function testTaskOperations(token) {
  console.log("\nüìã Testing Task Operations...")

  const headers = {
    "Content-Type": "application/json",
    Authorization: `Bearer ${token}`,
  }

  try {
    // Test GET tasks
    const getResponse = await fetch(`${BASE_URL}/api/tasks`, { headers })
    const tasks = await getResponse.json()

    if (getResponse.ok) {
      console.log("‚úÖ Fetch tasks successful:", tasks.length, "tasks found")
      return true
    } else {
      console.log("‚ùå Fetch tasks failed:", tasks.error)
      return false
    }
  } catch (error) {
    console.log("‚ùå Task operations error:", error.message)
    return false
  }
}

async function testAttendanceOperations() {
  console.log("\n‚è∞ Testing Attendance Operations...")

  try {
    // Test CREATE attendance record
    const createResponse = await fetch(`${BASE_URL}/api/attendance`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        employeeId: "test-employee-id",
        employeeName: "Test Employee",
        action: "punch_in",
        timestamp: new Date(),
      }),
    })

    const newRecord = await createResponse.json()

    if (createResponse.ok) {
      console.log("‚úÖ Create attendance record successful")
      return true
    } else {
      console.log("‚ùå Create attendance record failed:", newRecord.error)
      return false
    }
  } catch (error) {
    console.log("‚ùå Attendance operations error:", error.message)
    return false
  }
}

async function runAllTests() {
  console.log("üöÄ Starting Comprehensive Functionality Tests\n")

  const dbConnected = await testDatabaseConnection()
  if (!dbConnected) {
    console.log("\n‚ùå Database connection failed. Please check your MongoDB URI and run database initialization.")
    return
  }

  const token = await testAuthentication()
  if (!token) {
    console.log("\n‚ùå Authentication failed. Please initialize the database first.")
    return
  }

  const employeeOpsSuccess = await testEmployeeOperations(token)
  const taskOpsSuccess = await testTaskOperations(token)
  const attendanceOpsSuccess = await testAttendanceOperations()

  console.log("\nüìä Test Results Summary:")
  console.log("Database Connection:", dbConnected ? "‚úÖ" : "‚ùå")
  console.log("Authentication:", token ? "‚úÖ" : "‚ùå")
  console.log("Employee Operations:", employeeOpsSuccess ? "‚úÖ" : "‚ùå")
  console.log("Task Operations:", taskOpsSuccess ? "‚úÖ" : "‚ùå")
  console.log("Attendance Operations:", attendanceOpsSuccess ? "‚úÖ" : "‚ùå")

  if (dbConnected && token && employeeOpsSuccess && taskOpsSuccess && attendanceOpsSuccess) {
    console.log("\nüéâ All tests passed! Your parlour dashboard is fully functional.")
  } else {
    console.log("\n‚ö†Ô∏è  Some tests failed. Please check the errors above.")
  }
}

// Run tests if this script is executed directly
if (typeof window === "undefined") {
  runAllTests()
}

export { runAllTests }
